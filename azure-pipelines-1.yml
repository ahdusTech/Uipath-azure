trigger:
- main

variables:
  group: UiPath

stages:
- stage: Build
  displayName: 'Create build artifact'
  jobs:
  - job: BuildArtifact
    pool:
      name: Azure-UIP
    steps:
    - task: UiPathPack@3
      inputs:
        versionType: 'AutoVersion'
        projectJsonPath: '$(Build.SourcesDirectory)/project.json'
        orchestratorConnection: 'Azure-UIpath'
        outputPath: '$(Build.ArtifactStagingDirectory)/Output'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    - task: UiPathDeploy@3
      inputs:
        orchestratorConnection: 'Azure-UIpath'
        packagesPath: '$(Build.ArtifactStagingDirectory)/Output'
        folderName: 'Shared'

- stage: Asset
  displayName: 'Create Assets'
  jobs:
  - job: CreateAssets
    pool:
      name: Azure-UIP
    steps:
    - task: UiPathAssets@3
      inputs:
        orchestratorConnection: 'Azure-UIpath'
        folderName: 'Shared'
        assetActionType: 'Deploy'
        csvFile: '$(Build.SourcesDirectory)/Data/Assets.csv'

- stage: DeployDEV
  displayName: 'Deploy build artifact to DEV'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: deployDEV
    displayName: 'Restore package to DEV Orchestrator'
    pool:
      name: Azure-UIP
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: VSTest@2
            inputs:
              testSelector: 'testAssemblies'
              testAssemblyVer2: |
                **\*test*.dll
                !**\*TestAdapter.dll

- stage: TestDEV
  displayName: 'Test After Publish'
  dependsOn: DeployDEV
  condition: succeeded()
  jobs:
  - job: TestDEV
    pool: 
      name: Azure-UIP
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $repos = Get-AzReposRepository -OrganizationName "<Azure-UIPath>" -ProjectName "<Azure-UIPath>"

          foreach ($repo in $repos) {
              $repoName = $repo.Name
              $repoUrl = $repo.RemoteUrl
              Write-Host "Testing $repoName at $repoUrl ..."
              # add your testing command here
          }
    displayName: 'Test all code in Azure Repo'
